#pragma version 10

smart_contracts.smartcontract.contract.Blockchainsmartcontract.approval_program:
    intcblock 0 1 126227704
    bytecblock "certificateID" "is_revoked" "admin" "expiry_date" "counterCertificates" "skill_level" "revocation_reason" "language" "uniqueIDs" "issue_date" "issued_by" 0x151f7c75
    txn ApplicationID
    bnz main_after_if_else@2
    callsub __init__

main_after_if_else@2:
    callsub __puya_arc4_router__
    return


// smart_contracts.smartcontract.contract.Blockchainsmartcontract.__init__() -> void:
__init__:
    proto 0 0
    bytec_2 // "admin"
    global CreatorAddress
    app_global_put
    bytec 4 // "counterCertificates"
    intc_0 // 0
    app_global_put
    bytec 8 // "uniqueIDs"
    intc_0 // 0
    app_global_put
    retsub


// smart_contracts.smartcontract.contract.Blockchainsmartcontract.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    proto 0 1
    txn NumAppArgs
    bz __puya_arc4_router___bare_routing@14
    pushbytess 0x30c6d58a 0xd8025d77 0xe08e7389 0x1cc48d00 0xcdf5e9d0 0xf4100402 0xdaef6775 0xc21e663f 0x61db330e 0xa40df78b // method "opt_in()void", method "issue_certificate(account,string,string)uint64", method "view_certificate(account)(byte[],string,string,byte[],string,string)", method "update_level(account,string)void", method "revoke_certificate(account,string)void", method "valid_certificate(account)void", method "renew_certificate(account)void", method "transfer_certificate(account,account)void", method "check_expiration(account)string", method "check_revocation(account)string"
    txna ApplicationArgs 0
    match __puya_arc4_router___opt_in_route@2 __puya_arc4_router___issue_certificate_route@3 __puya_arc4_router___view_certificate_route@4 __puya_arc4_router___update_level_route@5 __puya_arc4_router___revoke_certificate_route@6 __puya_arc4_router___valid_certificate_route@7 __puya_arc4_router___renew_certificate_route@8 __puya_arc4_router___transfer_certificate_route@9 __puya_arc4_router___check_expiration_route@10 __puya_arc4_router___check_revocation_route@11
    intc_0 // 0
    retsub

__puya_arc4_router___opt_in_route@2:
    txn OnCompletion
    intc_1 // OptIn
    ==
    assert // OnCompletion is not OptIn
    txn ApplicationID
    assert // can only call when not creating
    callsub opt_in
    intc_1 // 1
    retsub

__puya_arc4_router___issue_certificate_route@3:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    txna ApplicationArgs 2
    extract 2 0
    txna ApplicationArgs 3
    extract 2 0
    callsub issue_certificate
    itob
    bytec 11 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    retsub

__puya_arc4_router___view_certificate_route@4:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    callsub view_certificate
    dig 5
    len
    itob
    extract 6 2
    uncover 6
    concat
    dig 5
    len
    itob
    extract 6 2
    uncover 6
    concat
    dig 5
    len
    itob
    extract 6 2
    uncover 6
    concat
    dig 5
    len
    itob
    extract 6 2
    uncover 6
    concat
    dig 5
    len
    itob
    extract 6 2
    uncover 6
    concat
    dig 5
    len
    itob
    extract 6 2
    uncover 6
    concat
    dig 5
    len
    pushint 12 // 12
    +
    dup
    itob
    extract 6 2
    pushbytes 0x000c
    swap
    concat
    dig 6
    len
    uncover 2
    +
    dup
    itob
    extract 6 2
    uncover 2
    swap
    concat
    dig 5
    len
    uncover 2
    +
    dup
    itob
    extract 6 2
    uncover 2
    swap
    concat
    dig 4
    len
    uncover 2
    +
    dup
    itob
    extract 6 2
    uncover 2
    swap
    concat
    dig 3
    len
    uncover 2
    +
    itob
    extract 6 2
    concat
    uncover 6
    concat
    uncover 5
    concat
    uncover 4
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    bytec 11 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    retsub

__puya_arc4_router___update_level_route@5:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    txna ApplicationArgs 2
    extract 2 0
    callsub update_level
    intc_1 // 1
    retsub

__puya_arc4_router___revoke_certificate_route@6:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    txna ApplicationArgs 2
    extract 2 0
    callsub revoke_certificate
    intc_1 // 1
    retsub

__puya_arc4_router___valid_certificate_route@7:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    callsub valid_certificate
    intc_1 // 1
    retsub

__puya_arc4_router___renew_certificate_route@8:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    callsub renew_certificate
    intc_1 // 1
    retsub

__puya_arc4_router___transfer_certificate_route@9:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    txna ApplicationArgs 2
    btoi
    txnas Accounts
    callsub transfer_certificate
    intc_1 // 1
    retsub

__puya_arc4_router___check_expiration_route@10:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    callsub check_expiration
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec 11 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    retsub

__puya_arc4_router___check_revocation_route@11:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    callsub check_revocation
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec 11 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    retsub

__puya_arc4_router___bare_routing@14:
    txn OnCompletion
    bnz __puya_arc4_router___after_if_else@18
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    retsub

__puya_arc4_router___after_if_else@18:
    intc_0 // 0
    retsub


// smart_contracts.smartcontract.contract.Blockchainsmartcontract.opt_in() -> void:
opt_in:
    proto 0 0
    txn Sender
    bytec_0 // "certificateID"
    pushbytes 0x
    app_local_put
    txn Sender
    bytec 7 // "language"
    pushbytes ""
    app_local_put
    txn Sender
    bytec 5 // "skill_level"
    pushbytes ""
    app_local_put
    txn Sender
    bytec 9 // "issue_date"
    intc_0 // 0
    app_local_put
    txn Sender
    bytec_3 // "expiry_date"
    intc_0 // 0
    app_local_put
    txn Sender
    bytec_1 // "is_revoked"
    intc_0 // 0
    app_local_put
    txn Sender
    bytec 6 // "revocation_reason"
    pushbytes ""
    app_local_put
    retsub


// smart_contracts.smartcontract.contract.Blockchainsmartcontract.issue_certificate(account: bytes, language: bytes, skill_level: bytes) -> uint64:
issue_certificate:
    proto 3 1
    txn Sender
    intc_0 // 0
    bytec_2 // "admin"
    app_global_get_ex
    assert // check self.admin exists
    ==
    assert
    frame_dig -3
    intc_0 // 0
    bytec_0 // "certificateID"
    app_local_get_ex
    assert // Account has not opted in to the application.
    len
    !
    assert // Certificate already issued to this account.
    global LatestTimestamp
    intc_2 // 126227704
    +
    intc_0 // 0
    bytec 8 // "uniqueIDs"
    app_global_get_ex
    assert // check self.uniqueIDs exists
    itob
    global LatestTimestamp
    itob
    concat
    txn Sender
    concat
    sha256
    frame_dig -3
    bytec_0 // "certificateID"
    uncover 2
    app_local_put
    frame_dig -3
    bytec 7 // "language"
    frame_dig -2
    app_local_put
    frame_dig -3
    bytec 5 // "skill_level"
    frame_dig -1
    app_local_put
    frame_dig -3
    bytec 9 // "issue_date"
    global LatestTimestamp
    app_local_put
    frame_dig -3
    bytec_3 // "expiry_date"
    uncover 2
    app_local_put
    frame_dig -3
    bytec 10 // "issued_by"
    txn Sender
    app_local_put
    frame_dig -3
    bytec_1 // "is_revoked"
    intc_0 // 0
    app_local_put
    frame_dig -3
    bytec 6 // "revocation_reason"
    pushbytes ""
    app_local_put
    intc_0 // 0
    bytec 4 // "counterCertificates"
    app_global_get_ex
    assert // check self.counterCertificates exists
    intc_1 // 1
    +
    bytec 4 // "counterCertificates"
    swap
    app_global_put
    intc_0 // 0
    bytec 8 // "uniqueIDs"
    app_global_get_ex
    assert // check self.uniqueIDs exists
    intc_1 // 1
    +
    bytec 8 // "uniqueIDs"
    swap
    app_global_put
    intc_0 // 0
    bytec 8 // "uniqueIDs"
    app_global_get_ex
    assert // check self.uniqueIDs exists
    intc_1 // 1
    -
    retsub


// smart_contracts.smartcontract.contract.Blockchainsmartcontract.view_certificate(account: bytes) -> bytes, bytes, bytes, bytes, bytes, bytes:
view_certificate:
    proto 1 6
    intc_0 // 0
    txn Sender
    frame_dig -1
    ==
    bnz view_certificate_bool_true@2
    txn Sender
    intc_0 // 0
    bytec_2 // "admin"
    app_global_get_ex
    assert // check self.admin exists
    ==
    bz view_certificate_bool_false@3

view_certificate_bool_true@2:
    intc_1 // 1
    b view_certificate_bool_merge@4

view_certificate_bool_false@3:
    intc_0 // 0

view_certificate_bool_merge@4:
    assert
    frame_dig -1
    intc_0 // 0
    bytec_0 // "certificateID"
    app_local_get_ex
    assert // Account has not opted in.
    len
    assert // This account does not have any certificate
    global LatestTimestamp
    frame_dig -1
    intc_0 // 0
    bytec_3 // "expiry_date"
    app_local_get_ex
    assert // check self.expiry_date exists for account
    <
    bz view_certificate_else_body@6
    pushbytes "Valid."
    frame_bury 0
    b view_certificate_after_if_else@7

view_certificate_else_body@6:
    pushbytes "Expired."
    frame_bury 0

view_certificate_after_if_else@7:
    frame_dig -1
    intc_0 // 0
    bytec_1 // "is_revoked"
    app_local_get_ex
    assert // check self.is_revoked exists for account
    bnz view_certificate_else_body@9
    pushbytes "Not revoked."
    b view_certificate_after_if_else@10

view_certificate_else_body@9:
    pushbytes "Revoked."

view_certificate_after_if_else@10:
    frame_dig -1
    intc_0 // 0
    bytec 7 // "language"
    app_local_get_ex
    assert // check self.language exists for account
    frame_dig -1
    intc_0 // 0
    bytec 5 // "skill_level"
    app_local_get_ex
    assert // check self.skill_level exists for account
    frame_dig -1
    intc_0 // 0
    bytec 10 // "issued_by"
    app_local_get_ex
    assert // check self.issued_by exists for account
    frame_dig -1
    cover 3
    frame_dig 0
    uncover 5
    uncover 6
    retsub


// smart_contracts.smartcontract.contract.Blockchainsmartcontract.update_level(account: bytes, new_skill_level: bytes) -> void:
update_level:
    proto 2 0
    txn Sender
    intc_0 // 0
    bytec_2 // "admin"
    app_global_get_ex
    assert // check self.admin exists
    ==
    assert
    frame_dig -2
    intc_0 // 0
    bytec_0 // "certificateID"
    app_local_get_ex
    assert // Account has not opted in.
    len
    assert // This account does not have any certificate.
    frame_dig -2
    bytec 5 // "skill_level"
    frame_dig -1
    app_local_put
    retsub


// smart_contracts.smartcontract.contract.Blockchainsmartcontract.revoke_certificate(account: bytes, reason: bytes) -> void:
revoke_certificate:
    proto 2 0
    txn Sender
    intc_0 // 0
    bytec_2 // "admin"
    app_global_get_ex
    assert // check self.admin exists
    ==
    assert
    frame_dig -2
    intc_0 // 0
    bytec_0 // "certificateID"
    app_local_get_ex
    assert // Account has not opted in.
    len
    assert // This account does not have any certificate.
    frame_dig -2
    intc_0 // 0
    bytec_1 // "is_revoked"
    app_local_get_ex
    assert // check self.is_revoked exists for account
    !
    assert
    frame_dig -2
    bytec_1 // "is_revoked"
    intc_1 // 1
    app_local_put
    intc_0 // 0
    bytec 4 // "counterCertificates"
    app_global_get_ex
    assert // check self.counterCertificates exists
    intc_1 // 1
    -
    bytec 4 // "counterCertificates"
    swap
    app_global_put
    frame_dig -2
    bytec 6 // "revocation_reason"
    frame_dig -1
    app_local_put
    retsub


// smart_contracts.smartcontract.contract.Blockchainsmartcontract.valid_certificate(account: bytes) -> void:
valid_certificate:
    proto 1 0
    txn Sender
    intc_0 // 0
    bytec_2 // "admin"
    app_global_get_ex
    assert // check self.admin exists
    ==
    assert
    frame_dig -1
    intc_0 // 0
    bytec_0 // "certificateID"
    app_local_get_ex
    assert // Account has not opted in.
    len
    assert // This account does not have any certificate.
    frame_dig -1
    intc_0 // 0
    bytec_1 // "is_revoked"
    app_local_get_ex
    assert // check self.is_revoked exists for account
    intc_1 // 1
    ==
    assert
    frame_dig -1
    bytec_1 // "is_revoked"
    intc_0 // 0
    app_local_put
    intc_0 // 0
    bytec 4 // "counterCertificates"
    app_global_get_ex
    assert // check self.counterCertificates exists
    intc_1 // 1
    +
    bytec 4 // "counterCertificates"
    swap
    app_global_put
    frame_dig -1
    bytec 6 // "revocation_reason"
    pushbytes ""
    app_local_put
    retsub


// smart_contracts.smartcontract.contract.Blockchainsmartcontract.renew_certificate(account: bytes) -> void:
renew_certificate:
    proto 1 0
    txn Sender
    intc_0 // 0
    bytec_2 // "admin"
    app_global_get_ex
    assert // check self.admin exists
    ==
    assert
    frame_dig -1
    intc_0 // 0
    bytec_0 // "certificateID"
    app_local_get_ex
    assert // Account has not opted in.
    len
    assert // This account does not have any certificate.
    global LatestTimestamp
    frame_dig -1
    intc_0 // 0
    bytec_3 // "expiry_date"
    app_local_get_ex
    assert // check self.expiry_date exists for account
    >
    assert // This certificate is not caducated.
    frame_dig -1
    intc_0 // 0
    bytec_1 // "is_revoked"
    app_local_get_ex
    assert // check self.is_revoked exists for account
    !
    assert // Cannot renew a revoked certificate.
    global LatestTimestamp
    intc_2 // 126227704
    +
    frame_dig -1
    bytec_3 // "expiry_date"
    uncover 2
    app_local_put
    retsub


// smart_contracts.smartcontract.contract.Blockchainsmartcontract.transfer_certificate(origin_account: bytes, destination_account: bytes) -> void:
transfer_certificate:
    proto 2 0
    txn Sender
    intc_0 // 0
    bytec_2 // "admin"
    app_global_get_ex
    assert // check self.admin exists
    ==
    assert
    frame_dig -2
    intc_0 // 0
    bytec_0 // "certificateID"
    app_local_get_ex
    assert // Account has not opted in.
    len
    assert // This account does not have any certificate.
    frame_dig -2
    intc_0 // 0
    bytec_0 // "certificateID"
    app_local_get_ex
    assert // check self.certificateID exists for account
    frame_dig -1
    bytec_0 // "certificateID"
    uncover 2
    app_local_put
    frame_dig -2
    intc_0 // 0
    bytec 7 // "language"
    app_local_get_ex
    assert // check self.language exists for account
    frame_dig -1
    bytec 7 // "language"
    uncover 2
    app_local_put
    frame_dig -2
    intc_0 // 0
    bytec 5 // "skill_level"
    app_local_get_ex
    assert // check self.skill_level exists for account
    frame_dig -1
    bytec 5 // "skill_level"
    uncover 2
    app_local_put
    frame_dig -2
    intc_0 // 0
    bytec 9 // "issue_date"
    app_local_get_ex
    assert // check self.issue_date exists for account
    frame_dig -1
    bytec 9 // "issue_date"
    uncover 2
    app_local_put
    frame_dig -2
    intc_0 // 0
    bytec_3 // "expiry_date"
    app_local_get_ex
    assert // check self.expiry_date exists for account
    frame_dig -1
    bytec_3 // "expiry_date"
    uncover 2
    app_local_put
    frame_dig -2
    intc_0 // 0
    bytec 10 // "issued_by"
    app_local_get_ex
    assert // check self.issued_by exists for account
    frame_dig -1
    bytec 10 // "issued_by"
    uncover 2
    app_local_put
    frame_dig -2
    intc_0 // 0
    bytec_1 // "is_revoked"
    app_local_get_ex
    assert // check self.is_revoked exists for account
    frame_dig -1
    bytec_1 // "is_revoked"
    uncover 2
    app_local_put
    frame_dig -2
    intc_0 // 0
    bytec 6 // "revocation_reason"
    app_local_get_ex
    assert // check self.revocation_reason exists for account
    frame_dig -1
    bytec 6 // "revocation_reason"
    uncover 2
    app_local_put
    frame_dig -2
    callsub delete_account
    retsub


// smart_contracts.smartcontract.contract.Blockchainsmartcontract.delete_account(account: bytes) -> void:
delete_account:
    proto 1 0
    frame_dig -1
    intc_0 // 0
    bytec_0 // "certificateID"
    app_local_get_ex
    assert // Account has not opted in.
    len
    assert // This account does not have any certificate.
    frame_dig -1
    bytec_0 // "certificateID"
    app_local_del
    frame_dig -1
    bytec 7 // "language"
    app_local_del
    frame_dig -1
    bytec 5 // "skill_level"
    app_local_del
    frame_dig -1
    bytec 9 // "issue_date"
    app_local_del
    frame_dig -1
    bytec_3 // "expiry_date"
    app_local_del
    frame_dig -1
    bytec 10 // "issued_by"
    app_local_del
    frame_dig -1
    bytec_1 // "is_revoked"
    app_local_del
    frame_dig -1
    bytec 6 // "revocation_reason"
    app_local_del
    retsub


// smart_contracts.smartcontract.contract.Blockchainsmartcontract.check_expiration(account: bytes) -> bytes:
check_expiration:
    proto 1 1
    txn Sender
    frame_dig -1
    ==
    bnz check_expiration_bool_true@2
    txn Sender
    intc_0 // 0
    bytec_2 // "admin"
    app_global_get_ex
    assert // check self.admin exists
    ==
    bz check_expiration_bool_false@3

check_expiration_bool_true@2:
    intc_1 // 1
    b check_expiration_bool_merge@4

check_expiration_bool_false@3:
    intc_0 // 0

check_expiration_bool_merge@4:
    assert
    frame_dig -1
    intc_0 // 0
    bytec_0 // "certificateID"
    app_local_get_ex
    assert // Account has not opted in.
    len
    assert // This account does not have any certificate.
    frame_dig -1
    intc_0 // 0
    bytec_1 // "is_revoked"
    app_local_get_ex
    assert // check self.is_revoked exists for account
    !
    assert // The certificate is revoked.
    global LatestTimestamp
    frame_dig -1
    intc_0 // 0
    bytec_3 // "expiry_date"
    app_local_get_ex
    assert // check self.expiry_date exists for account
    >
    bz check_expiration_else_body@6
    pushbytes "The certificate is expired."
    b check_expiration_after_if_else@7

check_expiration_else_body@6:
    pushbytes "The certificate is not expired."

check_expiration_after_if_else@7:
    retsub


// smart_contracts.smartcontract.contract.Blockchainsmartcontract.check_revocation(account: bytes) -> bytes:
check_revocation:
    proto 1 1
    txn Sender
    intc_0 // 0
    bytec_2 // "admin"
    app_global_get_ex
    assert // check self.admin exists
    ==
    bnz check_revocation_bool_true@2
    txn Sender
    frame_dig -1
    ==
    bz check_revocation_bool_false@3

check_revocation_bool_true@2:
    intc_1 // 1
    b check_revocation_bool_merge@4

check_revocation_bool_false@3:
    intc_0 // 0

check_revocation_bool_merge@4:
    assert
    frame_dig -1
    intc_0 // 0
    bytec_0 // "certificateID"
    app_local_get_ex
    assert // Account has not opted in.
    len
    assert // This account does not have any certificate.
    global LatestTimestamp
    frame_dig -1
    intc_0 // 0
    bytec_3 // "expiry_date"
    app_local_get_ex
    assert // check self.expiry_date exists for account
    <
    assert // The certificate is caducated.
    frame_dig -1
    intc_0 // 0
    bytec_1 // "is_revoked"
    app_local_get_ex
    assert // check self.is_revoked exists for account
    bnz check_revocation_else_body@6
    pushbytes "The certificate is valid."
    b check_revocation_after_if_else@7

check_revocation_else_body@6:
    pushbytes "The certificate is revoked."

check_revocation_after_if_else@7:
    retsub
