{
    "hints": {
        "opt_in()void": {
            "call_config": {
                "opt_in": "CALL"
            }
        },
        "issue_certificate(account,string,string)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "view_certificate(account)(byte[],string,string,byte[],string,string)": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "update_level(account,string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "revoke_certificate(account,string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "valid_certificate(account)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "renew_certificate(account)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "transfer_certificate(account,account)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "check_expiration(account)string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "check_revocation(account)string": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuc21hcnRjb250cmFjdC5jb250cmFjdC5CbG9ja2NoYWluc21hcnRjb250cmFjdC5jbGVhcl9zdGF0ZV9wcm9ncmFtOgogICAgcHVzaGludCAxIC8vIDEKICAgIHJldHVybgo="
    },
    "state": {
        "global": {
            "num_byte_slices": 1,
            "num_uints": 2
        },
        "local": {
            "num_byte_slices": 5,
            "num_uints": 3
        }
    },
    "schema": {
        "global": {
            "declared": {
                "admin": {
                    "type": "bytes",
                    "key": "admin"
                },
                "counterCertificates": {
                    "type": "uint64",
                    "key": "counterCertificates"
                },
                "uniqueIDs": {
                    "type": "uint64",
                    "key": "uniqueIDs"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {
                "certificateID": {
                    "type": "bytes",
                    "key": "certificateID"
                },
                "expiry_date": {
                    "type": "uint64",
                    "key": "expiry_date"
                },
                "is_revoked": {
                    "type": "uint64",
                    "key": "is_revoked"
                },
                "issue_date": {
                    "type": "uint64",
                    "key": "issue_date"
                },
                "issued_by": {
                    "type": "bytes",
                    "key": "issued_by"
                },
                "language": {
                    "type": "bytes",
                    "key": "language"
                },
                "revocation_reason": {
                    "type": "bytes",
                    "key": "revocation_reason"
                },
                "skill_level": {
                    "type": "bytes",
                    "key": "skill_level"
                }
            },
            "reserved": {}
        }
    },
    "contract": {
        "name": "Blockchainsmartcontract",
        "methods": [
            {
                "name": "opt_in",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "issue_certificate",
                "args": [
                    {
                        "type": "account",
                        "name": "account"
                    },
                    {
                        "type": "string",
                        "name": "language"
                    },
                    {
                        "type": "string",
                        "name": "skill_level"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "view_certificate",
                "args": [
                    {
                        "type": "account",
                        "name": "account"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "(byte[],string,string,byte[],string,string)"
                }
            },
            {
                "name": "update_level",
                "args": [
                    {
                        "type": "account",
                        "name": "account"
                    },
                    {
                        "type": "string",
                        "name": "new_skill_level"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "revoke_certificate",
                "args": [
                    {
                        "type": "account",
                        "name": "account"
                    },
                    {
                        "type": "string",
                        "name": "reason"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "valid_certificate",
                "args": [
                    {
                        "type": "account",
                        "name": "account"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "renew_certificate",
                "args": [
                    {
                        "type": "account",
                        "name": "account"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "transfer_certificate",
                "args": [
                    {
                        "type": "account",
                        "name": "origin_account"
                    },
                    {
                        "type": "account",
                        "name": "destination_account"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "check_expiration",
                "args": [
                    {
                        "type": "account",
                        "name": "account"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "string"
                }
            },
            {
                "name": "check_revocation",
                "args": [
                    {
                        "type": "account",
                        "name": "account"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "string"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}